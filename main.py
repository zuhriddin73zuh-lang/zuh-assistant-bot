
# -*- coding: utf-8 -*-
import os
import requests
import traceback
from threading import Thread
from flask import Flask, request
import telebot
import time

# -----------------------
# –ß—Ç–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# -----------------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHAT_API_KEY = os.getenv("CHAT_API_KEY", "").strip()    # OpenAI (Chat)
IMAGE_API_KEY = os.getenv("IMAGE_API_KEY", "").strip()  # OpenAI Images –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
VIDEO_API_KEY = os.getenv("VIDEO_API_KEY", "").strip()  # DeepAI –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä

if not BOT_TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render.")

# -----------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------
# —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
API_TIMEOUT_SHORT = 15
API_TIMEOUT_LONG = 120

# –±–∞–∑–æ–≤—ã–µ endpoint'—ã (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
OPENAI_CHAT_URL = "https://api.openai.com/v1/chat/completions"
OPENAI_IMAGE_URL = "https://api.openai.com/v1/images"  # OpenAI new endpoints may differ
DEEPAI_TEXT2VIDEO_URL = "https://api.deepai.org/api/text2video"

# -----------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞
# -----------------------
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# -----------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
# -----------------------
def generate_text_openai(prompt):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI Chat API (–µ—Å–ª–∏ —É —Ç–µ–±—è CHAT_API_KEY)."""
    headers = {"Authorization": f"Bearer {CHAT_API_KEY}", "Content-Type": "application/json"}
    json_data = {
        "model": "gpt-3.5-turbo",
        "messages": [{"role": "user", "content": prompt}],
        "max_tokens": 300,
        "temperature": 0.7
    }
    r = requests.post(OPENAI_CHAT_URL, headers=headers, json=json_data, timeout=API_TIMEOUT_SHORT)
    r.raise_for_status()
    j = r.json()
    # –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
    return j["choices"][0]["message"]["content"].strip()

def generate_image_openai(prompt):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI Images API.
    –í–ê–ñ–ù–û: endpoint/—Ñ–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è —É —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ ‚Äî –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø—Ä–∞–≤–∏–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤–µ—Ä–Ω—É–ª).
    """
    headers = {"Authorization": f"Bearer {IMAGE_API_KEY}", "Content-Type": "application/json"}
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å/—Ñ–æ—Ä–º–∞—Ç OpenAI images.generate (—Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
    json_data = {"prompt": prompt, "size": "1024x1024"}
    # –ï—Å–ª–∏ —Ç–≤–æ–π IMAGE_API_KEY –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ‚Äî –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å URL –∏ —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.
    r = requests.post(OPENAI_IMAGE_URL + "/generations", headers=headers, json=json_data, timeout=API_TIMEOUT_LONG)
    r.raise_for_status()
    j = r.json()
    # –ü—Ä–∏–º–µ—Ä: j["data"][0]["url"]
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    if isinstance(j.get("data"), list) and j["data"] and "url" in j["data"][0]:
        return j["data"][0]["url"]
    if j.get("data") and isinstance(j["data"][0].get("b64_json"), str):
        # –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏ base64 - —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ —Ñ–∞–π–ª –∏ –≤–µ—Ä–Ω—ë–º –ø—É—Ç—å
        import base64, tempfile
        b64 = j["data"][0]["b64_json"]
        data = base64.b64decode(b64)
        tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
        tmp.write(data); tmp.close()
        return tmp.name
    # fallback
    return None

def generate_video_deepai(prompt):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ DeepAI text2video (–µ—Å–ª–∏ —É —Ç–µ–±—è –∫–ª—é—á DeepAI)."""
    headers = {"api-key": VIDEO_API_KEY}
    data = {"text": prompt}
    r = requests.post(DEEPAI_TEXT2VIDEO_URL, headers=headers, data=data, timeout=API_TIMEOUT_LONG)
    r.raise_for_status()
    j = r.json()
    # DeepAI –æ–±—ã—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç field "output_url" –∏–ª–∏ "id" ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º
    if j.get("output_url"):
        return j["output_url"]
    if j.get("output_urls"):
        return j["output_urls"][0]
    if j.get("id"):
        # –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Å—Å—ã–ª–∫—É –ø–æ id ‚Äî –Ω–æ —ç—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        return j.get("id")
    return None

# -----------------------
# –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# -----------------------
def process_prompt_async(chat_id, prompt, source_filename=None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç, –±–∞–Ω–Ω–µ—Ä, –≤–∏–¥–µ–æ –ø–æ—à–∞–≥–æ–≤–æ."""
    try:
        # 1) –¢–µ–∫—Å—Ç
        try:
            bot.send_message(chat_id, "üåÄ –ü—Ä–∏–Ω—è–ª. –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç...")
            text = generate_text_openai(prompt) if CHAT_API_KEY else "CHAT_API_KEY –Ω–µ –∑–∞–¥–∞–Ω."
            bot.send_message(chat_id, "‚úÖ –¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤:\n\n" + text)
        except Exception as e:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:\n" + str(e))
            text = None

        # 2) –ë–∞–Ω–Ω–µ—Ä (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        try:
            bot.send_message(chat_id, "üåÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –±–∞–Ω–Ω–µ—Ä (–∫–∞—Ä—Ç–∏–Ω–∫—É)...")
            image_result = generate_image_openai(prompt) if IMAGE_API_KEY else None
            if not image_result:
                bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–Ω–Ω–µ—Ä (–ø—Ä–æ–≤–µ—Ä—å IMAGE_API_KEY –∏–ª–∏ endpoint).")
            else:
                # –ï—Å–ª–∏ image_result ‚Äî —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø—É—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                if os.path.exists(image_result):
                    with open(image_result, "rb") as f:
                        bot.send_photo(chat_id, f)
                    try:
                        os.remove(image_result)
                    except Exception:
                        pass
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ URL ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —Å—Å—ã–ª–∫–µ (Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç—è–Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É)
                    bot.send_photo(chat_id, image_result)
                bot.send_message(chat_id, "‚úÖ –ë–∞–Ω–Ω–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç).")
        except Exception as e:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞–Ω–Ω–µ—Ä–∞:\n" + str(e))

        # 3) –í–∏–¥–µ–æ (–∫–æ—Ä–æ—Ç–∫–∏–π —Ä–∏–ª—Å) ‚Äî –≤–µ—Ä–Ω—ë–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        try:
            bot.send_message(chat_id, "üåÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–æ–ª–∏–∫ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç)...")
            video_url = generate_video_deepai(prompt) if VIDEO_API_KEY else None
            if video_url:
                bot.send_message(chat_id, "‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ ‚Äî —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–∫–∞—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è):\n" + str(video_url))
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ (–ø—Ä–æ–≤–µ—Ä—å VIDEO_API_KEY –∏–ª–∏ endpoint).")
        except Exception as e:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:\n" + str(e))

        bot.send_message(chat_id, "üéØ –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ.")
    except Exception as outer:
        # –ª–æ–≥–∏—Ä—É–µ–º –∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        tb = traceback.format_exc()
        print("PROCESS PROMPT ERROR:", tb)
        bot.send_message(chat_id, "‚ùó –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º—Ç–∞:\n" + str(outer))

# -----------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# -----------------------
@bot.message_handler(commands=['start'])
def cmd_start(message):
    bot.send_message(message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø Zuh Assistant Bot ü§ñ\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /promo\n"
        "–ö–æ–º–∞–Ω–¥–∞ /promo ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç, –±–∞–Ω–Ω–µ—Ä –∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–æ–ª–∏–∫ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã."
    )

@bot.message_handler(commands=['promo'])
def cmd_promo(message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    prompt = message.text.replace("/promo", "").strip()
    if not prompt:
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –ø–æ—Å–ª–µ /promo –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä: '/promo –§–∞—Å–∞–¥–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –≤ –¢–∞—à–∫–µ–Ω—Ç–µ, —É—Ç–µ–ø–ª–µ–Ω–∏–µ, 3D-—Å—Ç–∏–ª—å').")
        return
    bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è–ª –ø—Ä–æ–º—Ç. –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (—à–∞–≥–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏).")
    Thread(target=process_prompt_async, args=(message.chat.id, prompt)).start()

@bot.message_handler(content_types=['text'])
def handle_text(message):
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    prompt = message.text.strip()
    if not prompt:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç.")
        return
    bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è–ª –ø—Ä–æ–º—Ç. –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (—à–∞–≥–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏).")
    Thread(target=process_prompt_async, args=(message.chat.id, prompt)).start()

# –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∫ –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    bot.send_message(message.chat.id, "üéß –ü—Ä–∏–Ω—è–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –°–∫–∞—á–∏–≤–∞—é –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—é (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)...")
    try:
        file_info = bot.get_file(message.voice.file_id)
        file_bytes = requests.get(f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}", timeout=30).content
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ
        import tempfile, speech_recognition as sr
        tf = tempfile.NamedTemporaryFile(delete=False, suffix=".ogg")
        tf.write(file_bytes); tf.close()
        # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é ffmpeg –Ω–µ –≤—Å—Ç—Ä–æ–µ–Ω–∞ ‚Äî –ª—É—á—à–µ –∑–∞—Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ wav
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ SpeechRecognition (–±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –µ—Å–ª–∏ ffmpeg –¥–æ—Å—Ç—É–ø–µ–Ω)
        r = sr.Recognizer()
        with sr.AudioFile(tf.name) as source:
            audio = r.record(source)
        text = r.recognize_google(audio, language="ru-RU")
        os.remove(tf.name)
        bot.send_message(message.chat.id, f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: {text}\n–ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
        Thread(target=process_prompt_async, args=(message.chat.id, text)).start()
    except Exception as e:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: " + str(e))

# -----------------------
# –í–µ–±—Ö—É–∫ –¥–ª—è Render
# -----------------------
@app.route('/' + BOT_TOKEN, methods=['POST'])
def webhook():
    try:
        json_str = request.stream.read().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        print("Webhook processing error:", e)
    return "OK", 200

@app.route('/')
def index():
    return "Zuh Assistant Bot is running."

# -----------------------
# –ó–∞–ø—É—Å–∫ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞)
# -----------------------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—É", port)
    app.run(host="0.0.0.0", port=port)
















