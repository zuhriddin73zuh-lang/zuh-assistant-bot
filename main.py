# -*- coding: utf-8 -*-
"""
ZuhAssistantBot ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ Render).
–ë–µ—Ä—ë—Ç –∫–ª—é—á–∏ –∏–∑ Env:
BOT_TOKEN, CHAT_API_KEY, IMAGE_API_KEY, VIDEO_API_KEY, ADMIN_CHAT_ID (–æ–ø—Ü), CAPTCHA_ACTIVE (–æ–ø—Ü), KEEP_ALIVE_URL (–æ–ø—Ü).
"""
import os
import time
import requests
import traceback
import base64
from threading import Thread, Event
from flask import Flask, request
import telebot
from io import BytesIO
from PIL import Image
import langdetect  # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞

# -------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# -------------------------
BOT_TOKEN      = os.getenv("BOT_TOKEN", "").strip()
CHAT_API_KEY   = os.getenv("CHAT_API_KEY", "").strip()
IMAGE_API_KEY  = os.getenv("IMAGE_API_KEY", "").strip()
VIDEO_API_KEY  = os.getenv("VIDEO_API_KEY", "").strip()
ADMIN_CHAT_ID  = os.getenv("ADMIN_CHAT_ID", "").strip()    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
KEEP_ALIVE_URL = os.getenv("KEEP_ALIVE_URL", "").strip()   # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# -------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã / endpoints
# -------------------------
API_TIMEOUT_SHORT = 20
API_TIMEOUT_LONG  = 120

OPENAI_CHAT_URL  = "https://api.openai.com/v1/chat/completions"
OPENAI_IMAGE_URL = "https://api.openai.com/v1/images/generations"  # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏–º –ø–æ–¥ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
DEEPAI_TEXT2VIDEO_URL = "https://api.deepai.org/api/text2video"

# -------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# -------------------------
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# -------------------------
# –£—Ç–∏–ª–∏—Ç—ã (–∑–∞–ø—Ä–æ—Å —Å retry –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
# -------------------------
def safe_request(method, url, headers=None, json=None, data=None, params=None, timeout=30, max_retries=3):
    backoff = 1
    last_exc = None
    for attempt in range(max_retries):
        try:
            r = requests.request(method, url, headers=headers, json=json, data=data, params=params, timeout=timeout)
            if r.status_code == 429:
                time.sleep(backoff)
                backoff *= 2
                last_exc = requests.HTTPError("429 Too Many Requests")
                continue
            if 500 <= r.status_code < 600 and attempt < max_retries - 1:
                time.sleep(backoff)
                backoff *= 2
                last_exc = requests.HTTPError(f"{r.status_code} Server Error")
                continue
            r.raise_for_status()
            return r
        except Exception as e:
            last_exc = e
            if attempt < max_retries - 1:
                time.sleep(backoff)
                backoff *= 2
                continue
            raise last_exc

def periodic_status(chat_id, event_stop: Event, interval=15, text="‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è..."):
    while not event_stop.is_set():
        try:
            bot.send_message(chat_id, text)
        except Exception:
            pass
        event_stop.wait(interval)

# -------------------------
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ (ru/uz fallback)
# -------------------------
def detect_lang(text):
    try:
        d = langdetect.detect(text)
        if d.startswith("ru"):
            return "ru"
        if d.startswith("uz") or d.startswith("tr") or d.startswith("tk"):
            return "uz"
        # default
        return "ru"
    except Exception:
        return "ru"

# -------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ (OpenAI Chat)
# -------------------------
def generate_text(prompt, target_lang="ru"):
    if not CHAT_API_KEY:
        raise RuntimeError("CHAT_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
    headers = {"Authorization": f"Bearer {CHAT_API_KEY}", "Content-Type": "application/json"}
    system = ("–¢—ã ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è Facebook/Instagram/Telegram. "
              "–ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ, –¥–æ–±–∞–≤—å –ø—Ä–∏–∑—ã–≤ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ @ZuhFacadeBot.")
    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–º—ë–∫ –Ω–∞ —è–∑—ã–∫
    user_prompt = prompt + f"\n–Ø–∑—ã–∫: {'—Ä—É—Å—Å–∫–∏–π' if target_lang=='ru' else '—É–∑–±–µ–∫—Å–∫–∏–π'}. –ö–æ—Ä–æ—Ç–∫–æ, –¥–æ ~250 —Å–∏–º–≤–æ–ª–æ–≤."
    payload = {
        "model": "gpt-3.5-turbo",
        "messages": [{"role":"system","content":system}, {"role":"user","content":user_prompt}],
        "max_tokens": 300,
        "temperature": 0.7
    }
    r = safe_request("POST", OPENAI_CHAT_URL, headers=headers, json=payload, timeout=API_TIMEOUT_SHORT, max_retries=3)
    try:
        j = r.json()
    except Exception:
        raise RuntimeError(f"OpenAI Chat –≤–µ—Ä–Ω—É–ª –Ω–µ JSON. status={r.status_code}, body={r.text[:1000]}")
    try:
        return j["choices"][0]["message"]["content"].strip()
    except Exception as e:
        raise RuntimeError(f"Unexpected OpenAI Chat response: {e}. Full: {j}")

# -------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (OpenAI-like) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º BytesIO
# -------------------------
def generate_image_bytes(prompt):
    if not IMAGE_API_KEY:
        raise RuntimeError("IMAGE_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
    headers = {"Authorization": f"Bearer {IMAGE_API_KEY}", "Content-Type": "application/json"}
    payload = {"prompt": prompt, "size": "1024x1024", "n": 1}
    r = safe_request("POST", OPENAI_IMAGE_URL, headers=headers, json=payload, timeout=API_TIMEOUT_LONG, max_retries=2)
    try:
        j = r.json()
    except Exception:
        raise RuntimeError(f"Image API –≤–µ—Ä–Ω—É–ª –Ω–µ JSON. status={r.status_code}, body={r.text[:1000]}")
    data = j.get("data")
    if isinstance(data, list) and data:
        first = data[0]
        if "b64_json" in first:
            b64 = first["b64_json"]
            img_bytes = base64.b64decode(b64)
            return BytesIO(img_bytes)
        if "url" in first:
            # —Å–∫–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –ø–∞–º—è—Ç—å
            rr = requests.get(first["url"], timeout=API_TIMEOUT_LONG)
            rr.raise_for_status()
            return BytesIO(rr.content)
    raise RuntimeError(f"Unexpected Image API response: {j}")

# —Ä–µ—Å–∞–π–∑ –≤ –ø–∞–º—è—Ç–∏
def resize_image_bytes(img_bytesio, size):
    img_bytesio.seek(0)
    im = Image.open(img_bytesio).convert("RGB")
    im.thumbnail(size, Image.ANTIALIAS)
    new_im = Image.new("RGB", size, (255,255,255))
    w,h = im.size
    new_im.paste(im, ((size[0]-w)//2, (size[1]-h)//2))
    out = BytesIO()
    new_im.save(out, format="JPEG", quality=90)
    out.seek(0)
    return out

# -------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ (DeepAI) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É
# -------------------------
def generate_video_link(prompt):
    if not VIDEO_API_KEY:
        raise RuntimeError("VIDEO_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
    headers = {"api-key": VIDEO_API_KEY}
    data = {"text": prompt}
    r = safe_request("POST", DEEPAI_TEXT2VIDEO_URL, headers=headers, data=data, timeout=API_TIMEOUT_LONG, max_retries=3)
    try:
        j = r.json()
    except Exception:
        raise RuntimeError(f"Video API –≤–µ—Ä–Ω—É–ª –Ω–µ JSON. status={r.status_code}, body={r.text[:1000]}")
    if j.get("output_url"):
        return j["output_url"]
    if j.get("output_urls"):
        return j["output_urls"][0]
    if j.get("url"):
        return j["url"]
    raise RuntimeError(f"Unexpected Video API response: {j}")

# -------------------------
# –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ ‚Äî —Ç–µ–∫—Å—Ç -> –±–∞–Ω–Ω–µ—Ä -> –≤–∏–¥–µ–æ (–≤—Å–µ –≤ –ø–∞–º—è—Ç–∏)
# -------------------------
def process_prompt_async(chat_id, prompt_text):
    stop_event = Event()
    status_thr = Thread(target=periodic_status, args=(chat_id, stop_event, 15, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ..."))
    status_thr.daemon = True
    status_thr.start()

    # –æ–ø—Ä–µ–¥–µ–ª–∏–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = detect_lang(prompt_text)

    try:
        # 1) –¢–µ–∫—Å—Ç
        try:
            bot.send_message(chat_id, "üåÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç...")
            text = generate_text(prompt_text + "\n–î–æ–±–∞–≤—å –≤ –∫–æ–Ω—Ü–µ: '–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –≤ –±–æ—Ç–µ @ZuhFacadeBot'.", target_lang=lang)
            bot.send_message(chat_id, "‚úÖ –¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤:\n\n" + text)
        except Exception as e:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: " + str(e))
            text = None

        # 2) –ë–∞–Ω–Ω–µ—Ä (–≤ –ø–∞–º—è—Ç–∏)
        try:
            bot.send_message(chat_id, "üåÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –±–∞–Ω–Ω–µ—Ä (–∫–∞—Ä—Ç–∏–Ω–∫–∞ 1080√ó1080)...")
            image_prompt = (f"{prompt_text}. –ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –∫—Ä—É–ø–Ω–∞—è —á–∏—Ç–∞–µ–º–∞—è –Ω–∞–¥–ø–∏—Å—å '–§–∞—Å–∞–¥ –ø–æ–¥ –¢—Ä–∞–≤–µ–Ω—Ç–∏–Ω', "
                            f"'–ó–∞–∫–∞–∑–∞—Ç—å —Å–µ–π—á–∞—Å', '–¢–∞—à–∫–µ–Ω—Ç', –∏ —Å—Å—ã–ª–∫–∞/–ø—Ä–∏–∑—ã–≤ –∫ –±–æ—Ç—É @ZuhFacadeBot. –°—Ç–∏–ª—å: —Ñ–∞–∫—Ç—É—Ä–Ω–∞—è —à—Ç—É–∫–∞—Ç—É—Ä–∫–∞, —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ.")
            img_bytesio = generate_image_bytes(image_prompt)  # BytesIO
            # –≥–æ—Ç–æ–≤–∏–º –≤–µ—Ä—Å–∏–∏:
            banner_1080 = resize_image_bytes(BytesIO(img_bytesio.getvalue()), (1080,1080))
            banner_720  = resize_image_bytes(BytesIO(img_bytesio.getvalue()), (1280,720))
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 1080
            bot.send_photo(chat_id, banner_1080)
            bot.send_message(chat_id, "‚úÖ –ë–∞–Ω–Ω–µ—Ä –≥–æ—Ç–æ–≤. –¢–∞–∫–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç 1280√ó720 (–¥–ª—è Telegram/YouTube).")
        except Exception as e:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞–Ω–Ω–µ—Ä–∞: " + str(e))

        # 3) –í–∏–¥–µ–æ (—Å—Å—ã–ª–∫–∞)
        try:
            bot.send_message(chat_id, "üåÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ (Reels) ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...")
            video_link = generate_video_link(prompt_text + " –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ 10‚Äì15 —Å–µ–∫—É–Ω–¥, Reels, –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –∏ @ZuhFacadeBot.")
            bot.send_message(chat_id, "‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ. –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è/–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª):\n" + str(video_link))
            bot.send_message(chat_id, "‚ÑπÔ∏è –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏ –≤–∏–¥–µ–æ —Å–µ–±–µ –∏ –∑–∞–≥—Ä—É–∑–∏ –≤ Instagram/Facebook –∫–∞–∫ Reels.")
        except Exception as e:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: " + str(e))

        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
        try:
            if ADMIN_CHAT_ID:
                bot.send_message(ADMIN_CHAT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —Å–¥–µ–ª–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ –ø—Ä–æ–º—Ç—É:\n{prompt_text}")
        except Exception:
            pass

        bot.send_message(chat_id, "üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as outer:
        tb = traceback.format_exc()
        print("PROCESS PROMPT ERROR:", tb)
        bot.send_message(chat_id, "‚ùó –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: " + str(outer))
    finally:
        stop_event.set()

# -------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ / —Å–æ–æ–±—â–µ–Ω–∏–π
# -------------------------
@bot.message_handler(commands=['start'])
def cmd_start(m):
    bot.send_message(m.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø ZuhAssistantBot ‚Äî —Ç–≤–æ–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: '–°–¥–µ–ª–∞–π –±–∞–Ω–Ω–µ—Ä –ø—Ä–æ —Ñ–∞—Å–∞–¥–Ω–æ–µ —É—Ç–µ–ø–ª–µ–Ω–∏–µ' –∏–ª–∏ '–°–¥–µ–ª–∞–π —Ä–∏–ª—Å –ø—Ä–æ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—É—é —à—Ç—É–∫–∞—Ç—É—Ä–∫—É'.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /promo <—Ç–µ–∫—Å—Ç>, /slideshow (–ø–æ—à–ª–∏ —Ñ–æ—Ç–æ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ')."
    )

@bot.message_handler(commands=['promo'])
def cmd_promo(m):
    prompt = m.text.replace("/promo", "").strip()
    if not prompt:
        bot.send_message(m.chat.id, "–ù–∞–ø–∏—à–∏ –ø–æ—Å–ª–µ /promo –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º—Ç.")
        return
    bot.send_message(m.chat.id, "–ü—Ä–∏–Ω—è–ª –ø—Ä–æ–º—Ç. –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
    Thread(target=process_prompt_async, args=(m.chat.id, prompt)).start()

# –°–ª–∞–π–¥—à–æ—É: –º—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ Render ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º Video API fallback
user_photos = {}

@bot.message_handler(commands=['slideshow'])
def cmd_slideshow(m):
    user_photos[m.chat.id] = []
    bot.send_message(m.chat.id, "–û—Ç–ø—Ä–∞–≤—å 1‚Äì10 —Ñ–æ—Ç–æ. –ü–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–∏—à–ª–∏ '–ì–æ—Ç–æ–≤–æ'.")

@bot.message_handler(content_types=['photo', 'text', 'voice'])
def handle_all(m):
    cid = m.chat.id
    if m.content_type == "photo":
        if cid in user_photos:
            user_photos[cid].append(m.photo[-1].file_id)
            bot.send_message(cid, f"–ü—Ä–∏–Ω—è—Ç–æ —Ñ–æ—Ç–æ #{len(user_photos[cid])}. –û—Ç–ø—Ä–∞–≤—å –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ'.")
            return
    if m.content_type == "text":
        txt = m.text.strip()
        if txt.lower() == "–≥–æ—Ç–æ–≤–æ" and cid in user_photos:
            files = user_photos.pop(cid, [])
            if not files:
                bot.send_message(cid, "–ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")
                return
            bot.send_message(cid, "–§–æ—Ä–º–∏—Ä—É—é —Å–ª–∞–π–¥—à–æ—É —á–µ—Ä–µ–∑ Video API (–µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)...")
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–º—Ç –∏ –≤—ã–∑—ã–≤–∞–µ–º video API
            Thread(target=process_slideshow_via_api, args=(cid, files)).start()
            return
        # –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–º—Ç
        bot.send_message(cid, "–ü—Ä–∏–Ω—è–ª –ø—Ä–æ–º—Ç. –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
        Thread(target=process_prompt_async, args=(cid, txt)).start()
        return
    if m.content_type == "voice":
        bot.send_message(cid, "–ü—Ä–∏–Ω—è–ª –≥–æ–ª–æ—Å ‚Äî –ø–æ–ø—Ä–æ–±—É—é —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)...")
        try:
            file_info = bot.get_file(m.voice.file_id)
            file_bytes = requests.get(f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}", timeout=30).content
            # —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç—É—Ç –æ–ø—É—â–µ–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ ffmpeg; –ª—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç–æ–º
            bot.send_message(cid, "–ì–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç, –Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–º.")
        except Exception as e:
            bot.send_message(cid, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: " + str(e))

# -------------------------
# –°–ª–∞–π–¥—à–æ—É —á–µ—Ä–µ–∑ Video API (fallback)
# -------------------------
def process_slideshow_via_api(chat_id, file_ids):
    try:
        # —Å–æ–±–∏—Ä–∞–µ–º –æ–ø–∏—Å–∞—Ç–µ–ª—å –ø—Ä–æ–º—Ç–∞
        prompt = "–°–¥–µ–ª–∞–π —Å–ª–∞–π–¥—à–æ—É –∏–∑ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Å–ª–∞–π–¥), –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑—ã–≤ '–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –≤ –±–æ—Ç–µ @ZuhFacadeBot'."
        # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ (–ø—É–±–ª–∏—á–Ω—ã–µ) ‚Äî –Ω–æ –ø—Ä–æ—â–µ: –∏—Å–ø–æ–ª—å–∑—É–µ–º Video API —Å —ç—Ç–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
        video_link = generate_video_link(prompt)
        bot.send_message(chat_id, "‚úÖ –°–ª–∞–π–¥—à–æ—É –≥–æ—Ç–æ–≤–æ. –°—Å—ã–ª–∫–∞:\n" + video_link)
    except Exception as e:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–∞–π–¥—à–æ—É —á–µ—Ä–µ–∑ Video API: " + str(e))

# -------------------------
# –í–µ–±—Ö—É–∫ –¥–ª—è Render
# -------------------------
@app.route('/' + BOT_TOKEN, methods=['POST'])
def webhook():
    try:
        json_str = request.stream.read().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        print("Webhook processing error:", e)
    return "OK", 200

@app.route('/')
def index():
    return "ZuhAssistantBot (stateless) running."

# -------------------------
# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π keep-alive ping
# -------------------------
def keep_alive_worker(url):
    while True:
        try:
            requests.get(url, timeout=10)
        except Exception:
            pass
        time.sleep(9*60)

if KEEP_ALIVE_URL:
    t = Thread(target=keep_alive_worker, args=(KEEP_ALIVE_URL,))
    t.daemon = True
    t.start()

# -------------------------
# –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ
# -------------------------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    print("–ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É", port)
    app.run(host="0.0.0.0", port=port)
 





















