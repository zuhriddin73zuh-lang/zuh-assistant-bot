# -*- coding: utf-8 -*-
import os
import time
import requests
import traceback
import base64
import tempfile
from threading import Thread, Event
from flask import Flask, request
import telebot
from PIL import Image
from io import BytesIO

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ / –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHAT_API_KEY = os.getenv("CHAT_API_KEY", "").strip()
IMAGE_API_KEY = os.getenv("IMAGE_API_KEY", "").strip()
VIDEO_API_KEY = os.getenv("VIDEO_API_KEY", "").strip()
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID", "").strip()  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∫—É–¥–∞ —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
KEEP_ALIVE_URL = os.getenv("KEEP_ALIVE_URL", "").strip()  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–∞–º–æ–ø–∏–Ω–≥ (https)

if not BOT_TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# ---------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ----------
API_TIMEOUT_SHORT = 20
API_TIMEOUT_LONG = 120

OPENAI_CHAT_URL = "https://api.openai.com/v1/chat/completions"
OPENAI_IMAGE_URL = "https://api.openai.com/v1/images/generations"
DEEPAI_TEXT2VIDEO_URL = "https://api.deepai.org/api/text2video"

# –∫–∞—Ç–∞–ª–æ–≥–∏
STATIC_DIR = os.path.join(os.getcwd(), "static")
os.makedirs(STATIC_DIR, exist_ok=True)

# ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ----------
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã ----------
def request_with_retry(method, url, headers=None, json=None, data=None, params=None, timeout=API_TIMEOUT_SHORT, max_retries=3):
    backoff = 1
    last_exc = None
    for attempt in range(max_retries):
        try:
            r = requests.request(method, url, headers=headers, json=json, data=data, params=params, timeout=timeout)
            if r.status_code == 429:
                time.sleep(backoff)
                backoff *= 2
                last_exc = requests.HTTPError(f"429 from {url}")
                continue
            r.raise_for_status()
            return r
        except Exception as e:
            last_exc = e
            if attempt < max_retries - 1:
                time.sleep(backoff)
                backoff *= 2
                continue
            raise last_exc

def send_periodic_status(chat_id, event_stop: Event, interval=12, text="‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è..."):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∫–∞ event_stop –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."""
    while not event_stop.is_set():
        try:
            bot.send_message(chat_id, text)
        except Exception:
            pass
        event_stop.wait(interval)

def save_b64_image_to_file(b64_str):
    img_bytes = base64.b64decode(b64_str)
    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".png", dir=STATIC_DIR)
    tmp.write(img_bytes)
    tmp.close()
    return tmp.name

def resize_image_file(in_path, out_path, size):
    try:
        im = Image.open(in_path)
        im = im.convert("RGB")
        im.thumbnail(size, Image.ANTIALIAS)
        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å –Ω—É–∂–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º, –Ω–æ —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ —Ä–∞–∑–º–µ—Ä –±—ã–ª, –º–æ–∂–Ω–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ
        new_im = Image.new("RGB", size, (255,255,255))
        im_w, im_h = im.size
        new_im.paste(im, ((size[0]-im_w)//2, (size[1]-im_h)//2))
        new_im.save(out_path, format="JPEG", quality=90)
        return out_path
    except Exception as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ —Ä–µ—Å–∞–π–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

# ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI Chat ----------
def generate_text_openai(prompt):
    if not CHAT_API_KEY:
        raise RuntimeError("CHAT_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
    headers = {"Authorization": f"Bearer {CHAT_API_KEY}", "Content-Type": "application/json"}
    payload = {
        "model": "gpt-3.5-turbo",
        "messages": [
            {"role": "system", "content": "–¢—ã ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è Facebook/Instagram/Telegram. –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ, –¥–æ–±–∞–≤—å call-to-action –∏ —É–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞."},
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 300,
        "temperature": 0.7
    }
    r = request_with_retry("POST", OPENAI_CHAT_URL, headers=headers, json=payload, timeout=API_TIMEOUT_SHORT)
    j = r.json()
    return j["choices"][0]["message"]["content"].strip()

# ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (OpenAI-like) ----------
def generate_image_openai(prompt):
    if not IMAGE_API_KEY:
        raise RuntimeError("IMAGE_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
    headers = {"Authorization": f"Bearer {IMAGE_API_KEY}", "Content-Type": "application/json"}
    payload = {"prompt": prompt, "size": "1024x1024"}
    r = request_with_retry("POST", OPENAI_IMAGE_URL, headers=headers, json=payload, timeout=API_TIMEOUT_LONG)
    j = r.json()
    data = j.get("data")
    if isinstance(data, list) and len(data) > 0:
        first = data[0]
        if isinstance(first, dict) and "url" in first:
            # —Å–∫–∞—á–∏–≤–∞–µ–º –ø–æ URL
            img_url = first["url"]
            resp = requests.get(img_url, timeout=API_TIMEOUT_LONG)
            resp.raise_for_status()
            tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg", dir=STATIC_DIR)
            tmp.write(resp.content); tmp.close()
            return tmp.name
        if isinstance(first, dict) and "b64_json" in first:
            return save_b64_image_to_file(first["b64_json"])
    raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç IMAGE API")

# ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ (DeepAI text2video) ----------
def generate_video_deepai(prompt):
    if not VIDEO_API_KEY:
        raise RuntimeError("VIDEO_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
    headers = {"api-key": VIDEO_API_KEY}
    data = {"text": prompt}
    r = request_with_retry("POST", DEEPAI_TEXT2VIDEO_URL, headers=headers, data=data, timeout=API_TIMEOUT_LONG)
    j = r.json()
    if j.get("output_url"):
        return j["output_url"]
    if j.get("output_urls"):
        return j["output_urls"][0]
    if j.get("url"):
        return j["url"]
    raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –æ—Ç Video API")

# ---------- –ü–æ–¥–≥–æ–Ω–∫–∞ –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ----------
def download_file(url, dst_path):
    r = requests.get(url, timeout=API_TIMEOUT_LONG)
    r.raise_for_status()
    with open(dst_path, "wb") as f:
        f.write(r.content)
    return dst_path

def resize_video_ffmpeg(in_path, out_path, target_w, target_h):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º moviepy, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    try:
        from moviepy.editor import VideoFileClip
    except Exception as e:
        raise RuntimeError("moviepy/ffmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: " + str(e))
    clip = VideoFileClip(in_path)
    clip_resized = clip.resize(height=target_h)  # —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
    clip_resized.write_videofile(out_path, codec="libx264", audio_codec="aac")
    clip.close()
    clip_resized.close()
    return out_path

# ---------- –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Ñ–æ–Ω–æ–≤—ã–π) ----------
def process_prompt_async(chat_id, prompt):
    stop_event = Event()
    status_thread = Thread(target=send_periodic_status, args=(chat_id, stop_event, 15, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ—Ç... (–±–æ—Ç –Ω–µ –∑–∞–≤–∏—Å–∞–µ—Ç)"))
    status_thread.daemon = True
    status_thread.start()

    try:
        # 1) —Ç–µ–∫—Å—Ç
        try:
            bot.send_message(chat_id, "üåÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç...")
            text = generate_text_openai(prompt + "\n–î–æ–±–∞–≤—å –≤ –∫–æ–Ω—Ü–µ: '–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –≤ –±–æ—Ç–µ @ZuhFacadeBot'.")
            bot.send_message(chat_id, "‚úÖ –¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤:\n\n" + text)
        except Exception as e:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: " + str(e))
            text = None

        # 2) –±–∞–Ω–Ω–µ—Ä 1080x1080 –∏ –∫–æ–ø–∏—è 1280x720
        try:
            bot.send_message(chat_id, "üåÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –±–∞–Ω–Ω–µ—Ä (–∫–∞—Ä—Ç–∏–Ω–∫—É 1080x1080)...")
            image_prompt = f"{prompt}. –ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –±–æ–ª—å—à–∞—è —á–∏—Ç–∞–µ–º–∞—è –Ω–∞–¥–ø–∏—Å—å '–ó–∞–∫–∞–∑–∞—Ç—å –∑–¥–µ—Å—å' –∏ —É–∫–∞–∑–∞–Ω–∏–µ –±–æ—Ç–∞ @ZuhFacadeBot. –°—Ç–∏–ª—å: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞—Å–∞–¥, —á–∏—Å—Ç—ã–µ —Ü–≤–µ—Ç–∞."
            img_path = generate_image_openai(image_prompt)
            # —Å–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é 1080x1080 –∏ 1280x720
            banner1 = os.path.join(STATIC_DIR, f"banner_{int(time.time())}_1080.jpg")
            banner2 = os.path.join(STATIC_DIR, f"banner_{int(time.time())}_720.jpg")
            resize_image_file(img_path, banner1, (1080,1080))
            resize_image_file(img_path, banner2, (1280,720))
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª (1080)
            with open(banner1, "rb") as f:
                bot.send_photo(chat_id, f)
            bot.send_message(chat_id, f"‚úÖ –ë–∞–Ω–Ω–µ—Ä –≥–æ—Ç–æ–≤. –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è Telegram/YouTube: {os.path.basename(banner2)}")
        except Exception as e:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞–Ω–Ω–µ—Ä–∞: " + str(e))

        # 3) –≤–∏–¥–µ–æ (–ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∞–π–ª) –∏ —Å–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é 1280x720 –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            bot.send_message(chat_id, "üåÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ (Reels, 1080x1920). –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...")
            video_url = generate_video_deepai(prompt + " –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ 10-15 —Å–µ–∫—É–Ω–¥, —Ñ–æ—Ä–º–∞—Ç Reels, –¥–æ–±–∞–≤—å —Ç–µ–∫—Å—Ç-–ø—Ä–∏–∑—ã–≤ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ @ZuhFacadeBot.")
            bot.send_message(chat_id, "‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ. –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ/–ø—É–±–ª–∏–∫–∞—Ü–∏—é (–æ—Ä–∏–≥–∏–Ω–∞–ª):\n" + str(video_url))

            # –ø–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é 1280x720 (fallback)
            try:
                tmp_in = os.path.join(STATIC_DIR, f"video_in_{int(time.time())}.mp4")
                tmp_out = os.path.join(STATIC_DIR, f"video_out_{int(time.time())}_720.mp4")
                download_file(video_url, tmp_in)
                resize_video_ffmpeg(tmp_in, tmp_out, 1280, 720)
                bot.send_message(chat_id, "‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –≤–∏–¥–µ–æ –¥–ª—è Telegram/YouTube: " + os.path.basename(tmp_out))
            except Exception as e_local:
                bot.send_message(chat_id, "‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ª–æ–∫–∞–ª—å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç ffmpeg/moviepy). –û—Ä–∏–≥–∏–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ.")
        except Exception as e:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: " + str(e))

        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        try:
            if ADMIN_CHAT_ID:
                bot.send_message(ADMIN_CHAT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ –ø—Ä–æ–º—Ç—É:\n{prompt}")
        except Exception:
            pass

        bot.send_message(chat_id, "üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ.")
    except Exception as outer:
        tb = traceback.format_exc()
        print("PROCESS_PROMPT ERROR:", tb)
        bot.send_message(chat_id, "‚ùó –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º—Ç–∞: " + str(outer))
    finally:
        stop_event.set()

# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ----------
@bot.message_handler(commands=['start'])
def cmd_start(message):
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! –Ø ZuhAssistantBot ‚Äî —Ç–≤–æ–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
                     "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: '–°–¥–µ–ª–∞–π –±–∞–Ω–Ω–µ—Ä –ø—Ä–æ —Ñ–∞—Å–∞–¥–Ω–æ–µ —É—Ç–µ–ø–ª–µ–Ω–∏–µ' –∏–ª–∏ '–°–¥–µ–ª–∞–π —Ä–∏–ª—Å –ø—Ä–æ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—É—é —à—Ç—É–∫–∞—Ç—É—Ä–∫—É'.\n"
                     "–ö–æ–º–∞–Ω–¥—ã: /promo <—Ç–µ–∫—Å—Ç>, /slideshow (–æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –ø–æ—Ç–æ–º '–ì–æ—Ç–æ–≤–æ')."
                    )

@bot.message_handler(commands=['promo'])
def cmd_promo(message):
    prompt = message.text.replace("/promo", "").strip()
    if not prompt:
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –ø–æ—Å–ª–µ /promo –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º—Ç.")
        return
    bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è–ª –ø—Ä–æ–º—Ç. –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
    Thread(target=process_prompt_async, args=(message.chat.id, prompt)).start()

@bot.message_handler(commands=['slideshow'])
def cmd_slideshow(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å 1‚Äì10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–∏—à–ª–∏ —Å–ª–æ–≤–æ '–ì–æ—Ç–æ–≤–æ'.")
    # —Å–ª–∞–π–¥—à–æ—É —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ state (–Ω–∏–∂–µ)

# state –¥–ª—è slideshow
user_slideshow = {}

@bot.message_handler(content_types=['photo', 'text'])
def handle_all(message):
    # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Å–ª–∞–π–¥—à–æ—É
    if message.content_type == 'photo':
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id
        chat_id = message.chat.id
        if chat_id in user_slideshow:
            user_slideshow[chat_id].append(message.photo[-1].file_id)
            bot.send_message(chat_id, f"–ü—Ä–∏–Ω—è–ª —Ñ–æ—Ç–æ #{len(user_slideshow[chat_id])}. –û—Ç–ø—Ä–∞–≤—å –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ'.")
            return
    if message.content_type == 'text':
        text = message.text.strip()
        if text.lower() == "–≥–æ—Ç–æ–≤–æ":
            chat_id = message.chat.id
            photos = user_slideshow.get(chat_id, [])
            if not photos:
                bot.send_message(chat_id, "–ù—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ '–ì–æ—Ç–æ–≤–æ'.")
                return
            bot.send_message(chat_id, "–°–æ–±–∏—Ä–∞—é —Å–ª–∞–π–¥—à–æ—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.")
            Thread(target=process_slideshow, args=(chat_id, photos)).start()
            user_slideshow.pop(chat_id, None)
            return
        # –∏–Ω–∞—á–µ ‚Äî –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–º—Ç
        bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è–ª –ø—Ä–æ–º—Ç. –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
        Thread(target=process_prompt_async, args=(message.chat.id, text)).start()

# ---------- –°–±–æ—Ä–∫–∞ —Å–ª–∞–π–¥—à–æ—É (—Ñ–æ–Ω) ----------
def process_slideshow(chat_id, photo_file_ids):
    stop_event = Event()
    Thread(target=send_periodic_status, args=(chat_id, stop_event, 15, "‚è≥ –°–±–æ—Ä–∫–∞ —Å–ª–∞–π–¥—à–æ—É...")).start()
    try:
        tmp_files = []
        for fid in photo_file_ids:
            f_info = bot.get_file(fid)
            file_bytes = requests.get(f"https://api.telegram.org/file/bot{BOT_TOKEN}/{f_info.file_path}", timeout=30).content
            tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg", dir=STATIC_DIR)
            tmp.write(file_bytes); tmp.close()
            tmp_files.append(tmp.name)
        # –ø—Ä–æ–±—É–µ–º —Å–æ–±—Ä–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ
        try:
            out_path = os.path.join(STATIC_DIR, f"slideshow_{int(time.time())}.mp4")
            from moviepy.editor import ImageClip, concatenate_videoclips
            clips = [ImageClip(p).set_duration(2).resize(width=720) for p in tmp_files]
            video = concatenate_videoclips(clips, method="compose")
            video.write_videofile(out_path, fps=24, codec="libx264", audio=False)
            bot.send_video(chat_id, open(out_path, "rb"))
            bot.send_message(chat_id, "‚úÖ –°–ª–∞–π–¥—à–æ—É –≥–æ—Ç–æ–≤–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            try: os.remove(out_path)
            except: pass
        except Exception as e_local:
            # fallback: —Å–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å Video API
            try:
                bot.send_message(chat_id, "–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—ã—Ç–∞—é—Å—å —á–µ—Ä–µ–∑ Video API...")
                video_link = generate_video_deepai("–°–¥–µ–ª–∞–π —Å–ª–∞–π–¥—à–æ—É –∏–∑ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∫–∞–∂–¥—ã–π —Å–ª–∞–π–¥ 2 —Å–µ–∫—É–Ω–¥—ã, –¥–æ–±–∞–≤—å –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –∏ —Å—Å—ã–ª–∫—É –Ω–∞ @ZuhFacadeBot")
                bot.send_message(chat_id, "‚úÖ –°–ª–∞–π–¥—à–æ—É (—á–µ—Ä–µ–∑ Video API) –≥–æ—Ç–æ–≤–æ. –°—Å—ã–ª–∫–∞:\n" + video_link)
            except Exception as e_api:
                bot.send_message(chat_id, "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–∞–π–¥—à–æ—É: " + str(e_api))
        # –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
        for p in tmp_files:
            try: os.remove(p)
            except: pass
    except Exception as outer:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–ª–∞–π–¥—à–æ—É: " + str(outer))
    finally:
        stop_event.set()

# ---------- –í–µ–±—Ö—É–∫ –¥–ª—è Render ----------
@app.route('/' + BOT_TOKEN, methods=['POST'])
def webhook():
    try:
        json_str = request.stream.read().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        print("Webhook processing error:", e)
    return "OK", 200

@app.route('/')
def index():
    return "ZuhAssistantBot –∑–∞–ø—É—â–µ–Ω."

# ---------- Keep-alive (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ----------
def keep_alive_worker(url):
    while True:
        try:
            requests.get(url, timeout=10)
        except Exception:
            pass
        time.sleep(9 * 60)  # –∫–∞–∂–¥—ã–µ ~9 –º–∏–Ω—É—Ç

if KEEP_ALIVE_URL:
    t = Thread(target=keep_alive_worker, args=(KEEP_ALIVE_URL,))
    t.daemon = True
    t.start()

# ---------- –ó–∞–ø—É—Å–∫ (–ª–æ–∫–∞–ª—å–Ω–æ) ----------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    print("–ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É", port)
    app.run(host="0.0.0.0", port=port)

















