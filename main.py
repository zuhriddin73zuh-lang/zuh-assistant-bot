# -*- coding: utf-8 -*-
"""ZuhAssistantBot ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è Render.
–ë–µ—Ä—ë—Ç –∫–ª—é—á–∏ –∏–∑ Environment:
BOT_TOKEN, CHAT_API_KEY, IMAGE_API_KEY, VIDEO_API_KEY, ADMIN_CHAT_ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ),
CAPTCHA_ACTIVE (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, True/False), KEEP_ALIVE_URL (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
"""
import os
import time
import requests
import traceback
import base64
import tempfile
from threading import Thread, Event
from flask import Flask, request
import telebot
from PIL import Image
from io import BytesIO

# ---------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ---------------------------
BOT_TOKEN      = os.getenv("BOT_TOKEN", "").strip()
CHAT_API_KEY   = os.getenv("CHAT_API_KEY", "").strip()
IMAGE_API_KEY  = os.getenv("IMAGE_API_KEY", "").strip()
VIDEO_API_KEY  = os.getenv("VIDEO_API_KEY", "").strip()
ADMIN_CHAT_ID  = os.getenv("ADMIN_CHAT_ID", "").strip()    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
CAPTCHA_ACTIVE = os.getenv("CAPTCHA_ACTIVE", "False").strip().lower() == "true"
KEEP_ALIVE_URL = os.getenv("KEEP_ALIVE_URL", "").strip()   # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å Render Environment.")

# ---------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–æ–¥ –¥—Ä—É–≥–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä)
# ---------------------------
API_TIMEOUT_SHORT = 20
API_TIMEOUT_LONG  = 120

OPENAI_CHAT_URL  = "https://api.openai.com/v1/chat/completions"
OPENAI_IMAGE_URL = "https://api.openai.com/v1/images/generations"  # –µ—Å–ª–∏ —É —Ç–µ–±—è –¥—Ä—É–≥–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä ‚Äî –ø–æ–º–µ–Ω—è–µ–º
DEEPAI_TEXT2VIDEO_URL = "https://api.deepai.org/api/text2video"

# —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
STATIC_DIR = os.path.join(os.getcwd(), "static")
os.makedirs(STATIC_DIR, exist_ok=True)

# ---------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask
# ---------------------------
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# ---------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# ---------------------------
def request_with_retry(method, url, headers=None, json=None, data=None, params=None, timeout=API_TIMEOUT_SHORT, max_retries=3):
    backoff = 1
    last_exc = None
    for attempt in range(max_retries):
        try:
            r = requests.request(method, url, headers=headers, json=json, data=data, params=params, timeout=timeout)
            if r.status_code == 429:
                time.sleep(backoff)
                backoff *= 2
                last_exc = requests.HTTPError("429 Too Many Requests")
                continue
            r.raise_for_status()
            return r
        except Exception as e:
            last_exc = e
            if attempt < max_retries - 1:
                time.sleep(backoff)
                backoff *= 2
                continue
            raise last_exc

def save_b64_image(b64_str):
    img_bytes = base64.b64decode(b64_str)
    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg", dir=STATIC_DIR)
    tmp.write(img_bytes); tmp.close()
    return tmp.name

def resize_image(in_path, out_path, size):
    im = Image.open(in_path).convert("RGB")
    im.thumbnail(size, Image.ANTIALIAS)
    new_im = Image.new("RGB", size, (255,255,255))
    w,h = im.size
    new_im.paste(im, ((size[0]-w)//2, (size[1]-h)//2))
    new_im.save(out_path, format="JPEG", quality=90)
    return out_path

def send_periodic_status(chat_id, stop_event: Event, interval=15, text="‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è..."):
    while not stop_event.is_set():
        try:
            bot.send_message(chat_id, text)
        except Exception:
            pass
        stop_event.wait(interval)

# ---------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ (OpenAI)
# ---------------------------
def generate_text(prompt, lang="ru"):
    if not CHAT_API_KEY:
        raise RuntimeError("CHAT_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
    headers = {"Authorization": f"Bearer {CHAT_API_KEY}", "Content-Type": "application/json"}
    system = "–¢—ã ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è Facebook/Instagram/Telegram. –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ, —Å –ø—Ä–∏–∑—ã–≤–æ–º –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞ @ZuhFacadeBot."
    payload = {
        "model": "gpt-3.5-turbo",
        "messages": [
            {"role": "system", "content": system},
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 300,
        "temperature": 0.7
    }
    r = request_with_retry("POST", OPENAI_CHAT_URL, headers=headers, json=payload, timeout=API_TIMEOUT_SHORT)
    j = r.json()
    return j["choices"][0]["message"]["content"].strip()

# ---------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (OpenAI-like)
# ---------------------------
def generate_image(prompt):
    if not IMAGE_API_KEY:
        raise RuntimeError("IMAGE_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
    headers = {"Authorization": f"Bearer {IMAGE_API_KEY}", "Content-Type": "application/json"}
    payload = {"prompt": prompt, "size": "1024x1024"}
    r = request_with_retry("POST", OPENAI_IMAGE_URL, headers=headers, json=payload, timeout=API_TIMEOUT_LONG)
    j = r.json()
    data = j.get("data")
    if isinstance(data, list) and data:
        first = data[0]
        if isinstance(first, dict) and "url" in first:
            # —Å–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL
            resp = requests.get(first["url"], timeout=API_TIMEOUT_LONG)
            resp.raise_for_status()
            tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg", dir=STATIC_DIR)
            tmp.write(resp.content); tmp.close()
            return tmp.name
        if isinstance(first, dict) and "b64_json" in first:
            return save_b64_image(first["b64_json"])
    raise RuntimeError("IMAGE API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

# ---------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ (DeepAI text2video) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É
# ---------------------------
def generate_video(prompt):
    if not VIDEO_API_KEY:
        raise RuntimeError("VIDEO_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
    headers = {"api-key": VIDEO_API_KEY}
    data = {"text": prompt}
    r = request_with_retry("POST", DEEPAI_TEXT2VIDEO_URL, headers=headers, data=data, timeout=API_TIMEOUT_LONG)
    j = r.json()
    if j.get("output_url"):
        return j["output_url"]
    if j.get("output_urls"):
        return j["output_urls"][0]
    if j.get("url"):
        return j["url"]
    raise RuntimeError("Video API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

# ---------------------------
# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
# ---------------------------
def download_file(url, dst):
    r = requests.get(url, timeout=API_TIMEOUT_LONG)
    r.raise_for_status()
    with open(dst, "wb") as f:
        f.write(r.content)
    return dst

# ---------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
# ---------------------------
def process_prompt(chat_id, prompt):
    stop_event = Event()
    Thread(target=send_periodic_status, args=(chat_id, stop_event, 15, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî —Ä–∞–±–æ—Ç–∞—é...")).start()

    try:
        # –¢–µ–∫—Å—Ç
        try:
            bot.send_message(chat_id, "üåÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç...")
            text = generate_text(prompt + "\n–î–æ–±–∞–≤—å –≤ –∫–æ–Ω—Ü–µ: '–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –≤ –±–æ—Ç–µ @ZuhFacadeBot'.")
            bot.send_message(chat_id, "‚úÖ –¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤:\n\n" + text)
        except Exception as e:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: " + str(e))
            text = None

        # –ë–∞–Ω–Ω–µ—Ä (1080x1080 –∏ –∫–æ–ø–∏—è 1280x720)
        try:
            bot.send_message(chat_id, "üåÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –±–∞–Ω–Ω–µ—Ä 1080√ó1080...")
            image_prompt = f"{prompt}. –ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –∫—Ä—É–ø–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å '–ó–∞–∫–∞–∑–∞—Ç—å –∑–¥–µ—Å—å' –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ @ZuhFacadeBot. –°—Ç–∏–ª—å: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞—Å–∞–¥."
            img_path = generate_image(image_prompt)
            banner_1080 = os.path.join(STATIC_DIR, f"banner_{int(time.time())}_1080.jpg")
            banner_720  = os.path.join(STATIC_DIR, f"banner_{int(time.time())}_720.jpg")
            resize_image(img_path, banner_1080, (1080,1080))
            resize_image(img_path, banner_720, (1280,720))
            with open(banner_1080, "rb") as f:
                bot.send_photo(chat_id, f)
            bot.send_message(chat_id, f"‚úÖ –ë–∞–Ω–Ω–µ—Ä –≥–æ—Ç–æ–≤. –í–∞—Ä–∏–∞–Ω—Ç –¥–ª—è Telegram/YouTube: {os.path.basename(banner_720)}")
        except Exception as e:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞–Ω–Ω–µ—Ä–∞: " + str(e))

        # –í–∏–¥–µ–æ ‚Äî —Å—Å—ã–ª–∫–∞ (–∏ –ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –∫–æ–ø–∏—é 720 –µ—Å–ª–∏ —Å–º–æ–∂–µ–º)
        try:
            bot.send_message(chat_id, "üåÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ (Reels) ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...")
            video_url = generate_video(prompt + " –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ 10-15 —Å–µ–∫—É–Ω–¥, Reels, –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ @ZuhFacadeBot.")
            bot.send_message(chat_id, "‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ (–æ—Ä–∏–≥–∏–Ω–∞–ª):\n" + str(video_url))
            # –ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å (–µ—Å–ª–∏ ffmpeg/moviepy –¥–æ—Å—Ç—É–ø–µ–Ω)
            try:
                in_tmp = os.path.join(STATIC_DIR, f"video_in_{int(time.time())}.mp4")
                out_tmp = os.path.join(STATIC_DIR, f"video_720_{int(time.time())}.mp4")
                download_file(video_url, in_tmp)
                # –ø—Ä–æ–±—É–µ–º resize —á–µ—Ä–µ–∑ moviepy (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
                try:
                    from moviepy.editor import VideoFileClip
                    clip = VideoFileClip(in_tmp)
                    clip_resized = clip.resize(height=720)
                    clip_resized.write_videofile(out_tmp, codec="libx264", audio_codec="aac")
                    clip.close(); clip_resized.close()
                    bot.send_message(chat_id, "‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –≤–∏–¥–µ–æ 1280√ó720: " + os.path.basename(out_tmp))
                except Exception:
                    # –µ—Å–ª–∏ moviepy/ffmpeg –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                    pass
            except Exception:
                pass
        except Exception as e:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: " + str(e))

        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try:
            if ADMIN_CHAT_ID:
                bot.send_message(ADMIN_CHAT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —Å–¥–µ–ª–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ –ø—Ä–æ–º—Ç—É:\n{prompt}")
        except Exception:
            pass

        bot.send_message(chat_id, "üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as outer:
        tb = traceback.format_exc()
        print("PROCESS ERROR:", tb)
        bot.send_message(chat_id, "‚ùó –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: " + str(outer))
    finally:
        stop_event.set()

# ---------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# ---------------------------
@bot.message_handler(commands=['start'])
def cmd_start(m):
    bot.send_message(m.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø ZuhAssistantBot ‚Äî —Ç–≤–æ–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: '–°–¥–µ–ª–∞–π –±–∞–Ω–Ω–µ—Ä –ø—Ä–æ —Ñ–∞—Å–∞–¥–Ω–æ–µ —É—Ç–µ–ø–ª–µ–Ω–∏–µ' –∏–ª–∏ '–°–¥–µ–ª–∞–π —Ä–∏–ª—Å –ø—Ä–æ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—É—é —à—Ç—É–∫–∞—Ç—É—Ä–∫—É'.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /promo <—Ç–µ–∫—Å—Ç>, /slideshow (–ø–æ—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ')."
    )

@bot.message_handler(commands=['promo'])
def cmd_promo(m):
    prompt = m.text.replace("/promo", "").strip()
    if not prompt:
        bot.send_message(m.chat.id, "–ù–∞–ø–∏—à–∏ –ø–æ—Å–ª–µ /promo –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º—Ç.")
        return
    bot.send_message(m.chat.id, "–ü—Ä–∏–Ω—è–ª –ø—Ä–æ–º—Ç. –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (—à–∞–≥–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å).")
    Thread(target=process_prompt, args=(m.chat.id, prompt)).start()

# —Å–ª–∞–π–¥—à–æ—É: multi-step
user_slideshow = {}

@bot.message_handler(commands=['slideshow'])
def cmd_slideshow(m):
    user_slideshow[m.chat.id] = []
    bot.send_message(m.chat.id, "–û—Ç–ø—Ä–∞–≤—å 1‚Äì10 —Ñ–æ—Ç–æ. –ü–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ'.")

@bot.message_handler(content_types=['photo', 'text', 'voice'])
def handle_all(m):
    cid = m.chat.id
    # —Ñ–æ—Ç–æ –¥–ª—è —Å–ª–∞–π–¥—à–æ—É
    if m.content_type == "photo":
        if cid in user_slideshow:
            user_slideshow[cid].append(m.photo[-1].file_id)
            bot.send_message(cid, f"–ü—Ä–∏–Ω—è—Ç–æ —Ñ–æ—Ç–æ #{len(user_slideshow[cid])}. –û—Ç–ø—Ä–∞–≤—å –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ'.")
            return
    if m.content_type == "text":
        txt = m.text.strip()
        if txt.lower() == "–≥–æ—Ç–æ–≤–æ" and cid in user_slideshow:
            files = user_slideshow.pop(cid, [])
            if not files:
                bot.send_message(cid, "–ù–∞–¥–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")
                return
            bot.send_message(cid, "–°–æ–±–∏—Ä–∞—é —Å–ª–∞–π–¥—à–æ—É ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.")
            Thread(target=process_slideshow, args=(cid, files)).start()
            return
        # –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–º—Ç ‚Äî —É–º–Ω—ã–π —Ä–µ–∂–∏–º
        bot.send_message(cid, "–ü—Ä–∏–Ω—è–ª –ø—Ä–æ–º—Ç. –°—Ç–∞—Ä—Ç—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
        Thread(target=process_prompt, args=(cid, txt)).start()
        return
    # –≥–æ–ª–æ—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ‚Äî –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å
    if m.content_type == "voice":
        bot.send_message(cid, "–ü—Ä–∏–Ω—è–ª –≥–æ–ª–æ—Å. –ü–æ–ø—ã—Ç–∞—é—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å...")
        try:
            file_info = bot.get_file(m.voice.file_id)
            file_bytes = requests.get(f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}", timeout=30).content
            tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".ogg", dir=STATIC_DIR)
            tmp.write(file_bytes); tmp.close()
            # —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ speech_recognition (–º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å ffmpeg)
            try:
                import speech_recognition as sr
                r = sr.Recognizer()
                with sr.AudioFile(tmp.name) as source:
                    audio = r.record(source)
                text = r.recognize_google(audio, language="ru-RU")
            except Exception:
                text = None
            os.remove(tmp.name)
            if text:
                bot.send_message(cid, "–†–∞—Å–ø–æ–∑–Ω–∞–ª —Ç–µ–∫—Å—Ç: " + text + "\n–ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
                Thread(target=process_prompt, args=(cid, text)).start()
            else:
                bot.send_message(cid, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        except Exception as e:
            bot.send_message(cid, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: " + str(e))

# ---------------------------
# –°–±–æ—Ä–∫–∞ —Å–ª–∞–π–¥—à–æ—É (—Ñ–æ–Ω)
# ---------------------------
def process_slideshow(chat_id, file_ids):
    stop_event = Event()
    Thread(target=send_periodic_status, args=(chat_id, stop_event, 15, "‚è≥ –°–±–æ—Ä–∫–∞ —Å–ª–∞–π–¥—à–æ—É...")).start()
    try:
        tmp_files = []
        for fid in file_ids:
            info = bot.get_file(fid)
            data = requests.get(f"https://api.telegram.org/file/bot{BOT_TOKEN}/{info.file_path}", timeout=30).content
            tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg", dir=STATIC_DIR)
            tmp.write(data); tmp.close()
            tmp_files.append(tmp.name)
        # –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å–±–æ—Ä–∫—É —á–µ—Ä–µ–∑ moviepy
        try:
            from moviepy.editor import ImageClip, concatenate_videoclips
            clips = [ImageClip(p).set_duration(2).resize(width=720) for p in tmp_files]
            video = concatenate_videoclips(clips, method="compose")
            out_path = os.path.join(STATIC_DIR, f"slideshow_{int(time.time())}.mp4")
            video.write_videofile(out_path, fps=24, codec="libx264", audio=False)
            bot.send_video(chat_id, open(out_path, "rb"))
            try: os.remove(out_path)
            except: pass
        except Exception:
            # fallback ‚Äî –æ–ø–∏—Å—ã–≤–∞–µ–º –∏ –ø—Ä–æ—Å–∏–º Video API —Å–æ–±—Ä–∞—Ç—å
            try:
                bot.send_message(chat_id, "–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—ã—Ç–∞—é—Å—å —á–µ—Ä–µ–∑ Video API...")
                video_link = generate_video("–°–¥–µ–ª–∞–π —Å–ª–∞–π–¥—à–æ—É –∏–∑ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Å–ª–∞–π–¥, –¥–æ–±–∞–≤—å –ø—Ä–∏–∑—ã–≤ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ @ZuhFacadeBot.")
                bot.send_message(chat_id, "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–ª–∞–π–¥—à–æ—É: " + video_link)
            except Exception as e:
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–∞–π–¥—à–æ—É: " + str(e))
        # –æ—á–∏—Å—Ç–∫–∞
        for p in tmp_files:
            try: os.remove(p)
            except: pass
    except Exception as outer:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –≤ —Å–ª–∞–π–¥—à–æ—É: " + str(outer))
    finally:
        stop_event.set()

# ---------------------------
# –í–µ–±—Ö—É–∫ (Render)
# ---------------------------
@app.route('/' + BOT_TOKEN, methods=['POST'])
def webhook():
    try:
        json_str = request.stream.read().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        print("Webhook error:", e)
    return "OK", 200

@app.route('/')
def index():
    return "ZuhAssistantBot running."

# ---------------------------
# Keep-alive ping (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# ---------------------------
def keep_alive_worker(url):
    while True:
        try:
            requests.get(url, timeout=10)
        except Exception:
            pass
        time.sleep(9 * 60)

if KEEP_ALIVE_URL:
    t = Thread(target=keep_alive_worker, args=(KEEP_ALIVE_URL,))
    t.daemon = True
    t.start()

# ---------------------------
# –ó–∞–ø—É—Å–∫
# ---------------------------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    print("–ó–∞–ø—É—Å–∫ ZuhAssistantBot –Ω–∞ –ø–æ—Ä—Ç—É", port)
    app.run(host="0.0.0.0", port=port)



















