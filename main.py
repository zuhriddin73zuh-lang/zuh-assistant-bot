# -*- coding: utf-8 -*-
"""
ZuhAssistantBot ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –¥–æ–ª–≥–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ Render.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç RU/UZ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç, –±–∞–Ω–Ω–µ—Ä (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç), –≤–∏–¥–µ–æ ‚Äî —Å—Å—ã–ª–∫—É.
–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render): BOT_TOKEN, CHAT_API_KEY, IMAGE_API_KEY, VIDEO_API_KEY, ADMIN_CHAT_ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
"""
import os
import time
import requests
import traceback
import base64
import tempfile
from threading import Thread, Event
from flask import Flask, request
import telebot
from io import BytesIO
from PIL import Image

# --- –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ ---
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHAT_API_KEY = os.getenv("CHAT_API_KEY", "").strip()
IMAGE_API_KEY = os.getenv("IMAGE_API_KEY", "").strip()
VIDEO_API_KEY = os.getenv("VIDEO_API_KEY", "").strip()
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID", "").strip()  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ Environment.")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
API_TIMEOUT_SHORT = 20
API_TIMEOUT_LONG = 120
OPENAI_CHAT_URL = "https://api.openai.com/v1/chat/completions"
OPENAI_IMAGE_URL = "https://api.openai.com/v1/images/generations"
DEEPAI_TEXT2VIDEO_URL = "https://api.deepai.org/api/text2video"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# --- –£—Ç–∏–ª–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ —Å retry ---
def safe_request(method, url, headers=None, json=None, data=None, timeout=20, max_retries=3):
    backoff = 1
    last = None
    for i in range(max_retries):
        try:
            r = requests.request(method, url, headers=headers, json=json, data=data, timeout=timeout)
            if r.status_code == 429:
                time.sleep(backoff); backoff *= 2; last = r
                continue
            r.raise_for_status()
            return r
        except Exception as e:
            last = e
            if i < max_retries-1:
                time.sleep(backoff); backoff *= 2
                continue
            raise last

# --- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª –ø—Ä–æ–≥—Ä–µ—Å—Å ---
def periodic_status(chat_id, stop_event: Event, interval=15, text="‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è..."):
    while not stop_event.is_set():
        try:
            bot.send_message(chat_id, text)
        except Exception:
            pass
        stop_event.wait(interval)

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ base64 –≤ BytesIO (–Ω–µ –Ω–∞ –¥–∏—Å–∫) ---
def bytesio_from_b64(b64str):
    data = base64.b64decode(b64str)
    return BytesIO(data)

# --- Resize –≤ –ø–∞–º—è—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç BytesIO JPEG ---
def resize_image_bytes(input_bytes, size):
    img = Image.open(BytesIO(input_bytes)).convert("RGB")
    img.thumbnail(size, Image.ANTIALIAS)
    canvas = Image.new("RGB", size, (255,255,255))
    w,h = img.size
    canvas.paste(img, ((size[0]-w)//2, (size[1]-h)//2))
    out = BytesIO()
    canvas.save(out, format="JPEG", quality=90)
    out.seek(0)
    return out

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ (OpenAI Chat) ---
def generate_text(prompt):
    if not CHAT_API_KEY:
        raise RuntimeError("CHAT_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
    headers = {"Authorization": f"Bearer {CHAT_API_KEY}", "Content-Type": "application/json"}
    payload = {"model":"gpt-3.5-turbo","messages":[{"role":"user","content":prompt}], "max_tokens":300, "temperature":0.7}
    r = safe_request("POST", OPENAI_CHAT_URL, headers=headers, json=payload, timeout=API_TIMEOUT_SHORT)
    try:
        j = r.json()
    except Exception:
        raise RuntimeError(f"OpenAI Chat –≤–µ—Ä–Ω—É–ª –Ω–µ JSON. status={r.status_code}, body={r.text[:1000]}")
    try:
        return j["choices"][0]["message"]["content"].strip()
    except Exception as e:
        raise RuntimeError(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ Chat API: {e}. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {j}")

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ (OpenAI-like). –í–æ–∑–≤—Ä–∞—â–∞–µ–º bytes ---
def generate_image_bytes(prompt):
    if not IMAGE_API_KEY:
        raise RuntimeError("IMAGE_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
    headers = {"Authorization": f"Bearer {IMAGE_API_KEY}", "Content-Type": "application/json"}
    payload = {"prompt": prompt, "size": "1024x1024", "n":1}
    r = safe_request("POST", OPENAI_IMAGE_URL, headers=headers, json=payload, timeout=API_TIMEOUT_LONG)
    try:
        j = r.json()
    except Exception:
        raise RuntimeError(f"Image API –≤–µ—Ä–Ω—É–ª –Ω–µ JSON. status={r.status_code}, body={r.text[:1000]}")
    data = j.get("data")
    if isinstance(data, list) and data:
        first = data[0]
        # –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è URL ‚Äî —Å–∫–∞—á–∏–≤–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º bytes
        if isinstance(first, dict) and "url" in first:
            rr = requests.get(first["url"], timeout=API_TIMEOUT_LONG); rr.raise_for_status()
            return rr.content
        # –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è base64
        if isinstance(first, dict) and "b64_json" in first:
            return base64.b64decode(first["b64_json"])
    raise RuntimeError(f"Unexpected Image API response: {j}")

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ (DeepAI) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É ---
def generate_video_link(prompt):
    if not VIDEO_API_KEY:
        raise RuntimeError("VIDEO_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
    headers = {"api-key": VIDEO_API_KEY}
    data = {"text": prompt}
    r = safe_request("POST", DEEPAI_TEXT2VIDEO_URL, headers=headers, data=data, timeout=API_TIMEOUT_LONG)
    try:
        j = r.json()
    except Exception:
        raise RuntimeError(f"Video API –≤–µ—Ä–Ω—É–ª –Ω–µ JSON. status={r.status_code}, body={r.text[:1000]}")
    if j.get("output_url"): return j["output_url"]
    if j.get("output_urls"): return j["output_urls"][0]
    if j.get("url"): return j["url"]
    raise RuntimeError(f"Unexpected Video API response: {j}")

# --- –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å: —Ç–µ–∫—Å—Ç, –±–∞–Ω–Ω–µ—Ä, –≤–∏–¥–µ–æ ---
def process_prompt_async(chat_id, prompt):
    stop_event = Event()
    status_thr = Thread(target=periodic_status, args=(chat_id, stop_event, 15, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è..."))
    status_thr.daemon = True
    status_thr.start()

    try:
        # 1) –¢–µ–∫—Å—Ç
        try:
            bot.send_message(chat_id, "üåÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç...")
            text = generate_text(prompt + "\n–í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å: '–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –≤ –±–æ—Ç–µ @ZuhFacadeBot'.")
            bot.send_message(chat_id, "‚úÖ –¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤:\n\n" +




















